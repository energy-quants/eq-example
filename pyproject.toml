[project]
name = "eq-example"
description = "A test project"
license.file = "LICENSE"
readme = "README.md"
dynamic = [
  "dependencies",
  "optional-dependencies",
  "version",
]
requires-python = ">=3.11"

[project.scripts]
example-cli = "eq.lib.example.cli:cli"

[project.urls]
"repository" = "https://github.com/energy-quants/eq-example"


[build-system]
requires = [
  "hatchling",
  "hatch-requirements-txt",
  "hatch-vcs",
]
build-backend = "hatchling.build"


[tool.hatch.version]
# https://github.com/ofek/hatch-vcs
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.hatch.build]
# https://hatch.pypa.io/latest/config/build/
include = ["/src"]
hooks.vcs.version-file = "src/eq/lib/example/_version.py"
hooks.vcs.template = "__version__ = {version!r}"
targets.wheel.strict-naming = false
targets.wheel.packages = ["/src/eq"]
targets.sdist.strict-naming = false
targets.sdist.packages = ["/src/eq"]

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements/pypi/run.txt"]

[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
dev = ["requirements/pypi/dev.txt"]
docs = ["requirements/pypi/docs.txt"]
host = ["requirements/pypi/host.txt"]
test = ["requirements/pypi/test.txt"]


[tool.pytest.ini_options]
# https://docs.pytest.org/en/7.1.x/reference/reference.html#ini-options-ref
minversion = "7.3"
testpaths = ["tests"]
addopts = "-lv --tb=short --color=yes --code-highlight=yes --import-mode=importlib --doctest-modules --doctest-continue-on-failure --html=.build/conda/test/html/test-report.html --self-contained-html --junit-xml=.build/conda/test/test-results.xml  --cov=src/eq/devtools --cov-report=html:.build/conda/test/html/cov --cov-report=xml:.build/conda/test/coverage.xml"
junit_family = "xunit2"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[tool.black]
line-length = 88
target-version = ["py311"]


[tool.isort]
# https://pycqa.github.io/isort/docs/configuration/options.html
profile = "black"
line_length = 88
force_grid_wrap = 2
multi_line_output=3
include_trailing_comma = true
lines_before_imports = 0
lines_after_imports = 2
force_alphabetical_sort_within_sections = true
sections = [
  "FUTURE",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "LOCALFOLDER",
]
default_section = "THIRDPARTY"
known_first_party = ["eq.lib.example"]


[tool.ruff]
line-length = 88

[tool.ruff.lint]
# https://beta.ruff.rs/docs/rules/
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  # "I",  # can't yet match isort config
]

[tool.ruff.format]
# https://docs.astral.sh/ruff/formatter/#configuration
preview = true
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"__init__.py" = [
  "F401",  # https://www.flake8rules.com/rules/F401.html
]

[tool.ruff.isort]
combine-as-imports = false
order-by-type = false
lines-after-imports = 2
split-on-trailing-comma = true
known-first-party = ["eq.lib.example"]
